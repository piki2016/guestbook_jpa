<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.2.xsd">
 
 
    <security:http auto-config="true" >
    	<!-- 
    	<security:access-denied-handler error-page="/403" />
    	 -->
    	 
    	<!-- 필터링 규칙은 반드시 좁은 쪽에서 넓은쪽으로 설정해야 한다. -->
    	<!-- IS_AUTHENTICATED_ANONYMOUSLY 는 예약어로 인증되지 않은 사용자를 말한다. -->
    	<!--  ROLE_USER는 SecurityMemberService 객체에서 사용자 객체에 설정한 값이다. 임의의 값이다. -->
    	<!--  응용한다면 ROLE_ADMIN 을 가지게 해도 될 것이다. -->
    	<security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
    	<security:intercept-url pattern="/guestbook/download/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
    	<security:intercept-url pattern="/guestbook/list" access="IS_AUTHENTICATED_ANONYMOUSLY" />
    	<security:intercept-url pattern="/guestbook/**" access="ROLE_USER" />
    	<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />        
                    
        <!-- 로그인을 하면 /guestbook/list로 이동하라는 의미이다. 실패하면 당연히 /user/loginfail 로 이동하라는 뜻. -->
        <!-- 인증이 필요한 페이지를 사용자가 요청하였는데 아직 인증을 하지 않은 상황이라면 /user/login 이 보여진다. 
        	로그인 후에는 사용자가 로그인한 페이지로 자동이동한다. 
        	로그인을 처리하는 페이지는 사용자가 만들지 않아도 된다. spring security가 /j_spring_security_check
        	path를 제공해준다.
         -->
    	<security:form-login login-page="/user/login" authentication-success-handler-ref="loginSuccessHandler" 
			authentication-failure-url="/user/loginfail" />
	    <!-- 로그아웃을 할경우 자동으로 이동하는 경로이다. spring security를 사용할 경우 로그아웃 url은 사용자가 만들지 않아도 된다.
	    	/j_spring_security_logout 경로를 요청하면 로그아웃된다.
	     -->		
    	<security:logout logout-success-url="/user/logout" delete-cookies="rememberMeKey"/>   
    	
    	<!-- remember me 설정.
    		 remember me는 내부적으로 cookie를 사용한다.
    	 -->
    	<security:remember-me key="rememberMeKey" token-validity-seconds="86400"/>   	
    </security:http>    
    
    <!-- 로그인 성공시 핸들러  -->
    <bean id="loginSuccessHandler" class="kr.co.sunnyvale.commons.util.LoginSuccessHandler"/>
   
   <!-- 암호화. --> 
   <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- security custom tag 사용 -->
   <bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>

   <!-- 로그인 정보를 읽어오기 위한 service객체를 설정. password-encoder는 암호가 일치하는지 확인한다. 알고리즘은 bcrypt -->
   <security:authentication-manager >    	    	
    	<security:authentication-provider user-service-ref="memberService" >
    		<security:password-encoder ref="bcryptPasswordEncoder" />
    	</security:authentication-provider>    	    	
    </security:authentication-manager>
    
      

</beans>